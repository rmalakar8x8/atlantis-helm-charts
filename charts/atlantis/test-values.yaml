image:
  repository: phx.ocir.io/idxixi5bmstw/atlantis/atlantis-custom-image
  tag: v0.0.2
  pullPolicy: IfNotPresent
imagePullSecrets:
- ocirsecret

orgAllowlist: github.com/8x8/auto_gitops_infra8-workflow-test-tree
orgWhitelist: github.com/8x8/*

github:
  user: 
  token: 
  secret: 

#Default Terraform version to be used by atlantis server
#defaultTFVersion: 1.1.4

initContainers:
- name: fetch-git-creds
  image: phx.ocir.io/idxixi5bmstw/utility-images/utility-container:v0.0.1
  command: ["/bin/sh","-c"]
  args:
    - compartment_id=`oci iam compartment list --compartment-id-in-subtree true --compartment-id ocid1.tenancy.oc1..aaaaaaaax7tm7jtfarexna447cmubjxwou6lug42jss2ddyis63wqo3lrpda --auth instance_principal | jq '.data[] | select(.["name"] == "tenantadmin-production") | .["id"]'|tr -d '"'`;
      token_secret_id=`oci vault secret list -c $compartment_id --auth instance_principal | jq '.data[] | select(.["secret-name"] == "github_token_cpe_provisioning") | .["id"]'|tr -d '"'`;
      git_token=`oci secrets secret-bundle get --secret-id $token_secret_id --auth instance_principal | jq -r '.data["secret-bundle-content"]["content"]' | base64 -d - |tr -d '"'`;
      webhook_secret_id=`oci vault secret list -c $compartment_id --auth instance_principal | jq '.data[] | select(.["secret-name"] == "tree_main_webhook_secret") | .["id"]'|tr -d '"'`;
      webhook_secret=`oci secrets secret-bundle get --secret-id $webhook_secret_id --auth instance_principal | jq -r '.data["secret-bundle-content"]["content"]' | base64 -d - |tr -d '"'`;
      oke_kube_config_secret_id=`oci vault secret list -c $compartment_id --auth instance_principal | jq '.data[] | select(.["secret-name"] == "kubeconfig-ops-dev01-phx") | .["id"]'|tr -d '"'`;
      oke_kube_config=`oci secrets secret-bundle get --secret-id $oke_kube_config_secret_id --auth instance_principal | jq -r '.data["secret-bundle-content"]["content"]' | base64 -d - |tr -d '"'`;
      echo "git_token=$git_token,webhook_secret=$webhook_secret,oke_kube_config=$oke_kube_config";

      






hidePrevPlanComments: true
logLevel: info

service:
  type: LoadBalancer
  port: 80
  targetPort: 4141
  annotations:
    serviceAnnotation1: value1
    serviceAnnotation2: value2


## Use Server Side Repo Config,
## ref: https://www.runatlantis.io/docs/server-side-repo-config.html
## Example default configuration
repoConfig: |
 ---
 repos:
   # Applies only to 'auto_gitops_infra8-workflow-test-tree' repository
 - id: github.com/8x8/auto_gitops_infra8-workflow-test-tree
   branch: master
   apply_requirements: [approved, mergeable]
   delete_source_branch_on_merge: false
   allow_custom_workflows: true
   allowed_overrides: [delete_source_branch_on_merge, workflow]
 #  pre_workflow_hooks:
 #    - run: /home/atlantis/hooks/default.pre-hook.sh >> default.pre-hook.output
 #  post_workflow_hooks:
 #    - run: /home/atlantis/hooks/default.post-hook.sh >> default.post-hook.output
   workflow: default_terragrunt
 
 workflows:
   default_terragrunt:
     plan:
       steps:
       - env: # Will create env var TERRAGRUNT_TFPATH with terraform value, since our version of terraform is loaded in the PATH so any 'terraform' commands issued by Terragrunt will use the global terraform binary
           name: TERRAGRUNT_TFPATH
           command: 'echo "terraform"'
       - env: # get github token to checkout workflow repo
           name: GITHUB_TOKEN
           command: 'echo $ATLANTIS_GH_TOKEN'
       - env: # set HOME location where to checkout policy repo
           name: HOME_PATH
           command: echo '/home/atlantis'
       - env: # set policy repo path
           name: POLICY_REPO_PATH
           command: echo $HOME_PATH/policy_repo
       - env: # opa binary path
           name: OPA_PATH
           command: echo '/usr/local/bin'
       - run: echo '==== This first message is from the plan step | before plan action ===='
       - run: rm -rf $POLICY_REPO_PATH || true
       - run: mkdir -p $POLICY_REPO_PATH
       # get the workflows repo to execute opa policy script
       - run: git -C $POLICY_REPO_PATH clone https://$GITHUB_TOKEN@github.com/8x8/auto_gitops_oci_opa_policies.git
       # commenting out requirements.txt as there is no need at present for any special packages to installed
       # - run: pip3 install -r $POLICY_REPO_PATH/auto_gitops_oci_opa_policies/scripts/requirements.txt
       - run: terragrunt plan -no-color -input=false -out=$PLANFILE
       - run: terragrunt show -no-color -json $PLANFILE > $SHOWFILE
       - run: python3 $POLICY_REPO_PATH/auto_gitops_oci_opa_policies/scripts/opa_policy_check.py
       - run: echo '==== This second message is from the plan step | after plan action ===='
     apply:
       steps:
       - env:
           name: TERRAGRUNT_TFPATH
           command: 'echo "terraform"'
       - run: terragrunt apply -no-color -input=false $PLANFILE
 
# We only need to check every 60s since Atlantis is not a high-throughput service.
livenessProbe:
  enabled: true
  periodSeconds: 60
  initialDelaySeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  scheme: HTTP
readinessProbe:
  enabled: true
  periodSeconds: 60
  initialDelaySeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  scheme: HTTP


podTemplate:
  annotations: {}
    # kube2iam example:
    # iam.amazonaws.com/role: role-arn
  labels: {}

# It is not recommended to run atlantis as root
statefulSet:
  annotations: {}
  labels: {}
  securityContext:
    fsGroup: 1000
    runAsUser: 100
    fsGroupChangePolicy: "OnRootMismatch"
  priorityClassName: ""

replicaCount: 1

resources:
  requests:
    memory: 1Gi
    cpu: 100m
  limits:
    memory: 1Gi
    cpu: 100m

## test container details
test:
  enabled: flase
  image: lachlanevenson/k8s-kubectl
  imageTag: v1.4.8-bash