
orgAllowlist: github.com/8x8/auto_gitops_infra8-workflow-test-tree
orgWhitelist: github.com/8x8/*
logLevel: info

github:
  user: sa-selfservice
# If managing secrets outside the chart for the webhook, use this variable to reference the secret name
# Don't change this name as this name is being used at init container to create a 
vcsSecretName: 'git-secrets'

## To be used for mounting credential files (when using google provider).
serviceAccountSecrets:
  # credentials: <json file as base64 encoded string>
  # credentials-staging: <json file as base64 encoded string>


## -------------------------- ##
# Default values for atlantis (override as needed).
## -------------------------- ##

image:
  repository: phx.ocir.io/idxixi5bmstw/atlantis/atlantis-custom-image
  tag: v0.0.2
  pullPolicy: IfNotPresent

## Optionally specify an array of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets:
- ocirsecret


service:
  type: LoadBalancer
  port: 80
  targetPort: 4141
  annotations:
    serviceAnnotation1: value1
    serviceAnnotation2: value2
## Use Server Side Repo Config,
## ref: https://www.runatlantis.io/docs/server-side-repo-config.html
## Example default configuration
repoConfig: |
 ---
 repos:
   # Applies only to 'auto_gitops_infra8-workflow-test-tree' repository
 - id: github.com/8x8/auto_gitops_infra8-workflow-test-tree
   branch: master
   apply_requirements: [approved, mergeable]
   delete_source_branch_on_merge: false
   allow_custom_workflows: true
   allowed_overrides: [delete_source_branch_on_merge, workflow]
 #  pre_workflow_hooks:
 #    - run: /home/atlantis/hooks/default.pre-hook.sh >> default.pre-hook.output
 #  post_workflow_hooks:
 #    - run: /home/atlantis/hooks/default.post-hook.sh >> default.post-hook.output
   workflow: default_terragrunt
 
 workflows:
   default_terragrunt:
     plan:
       steps:
       - env: # Will create env var TERRAGRUNT_TFPATH with terraform value, since our version of terraform is loaded in the PATH so any 'terraform' commands issued by Terragrunt will use the global terraform binary
           name: TERRAGRUNT_TFPATH
           command: 'echo "terraform"'
       - env: # get github token to checkout workflow repo
           name: GITHUB_TOKEN
           command: 'echo $ATLANTIS_GH_TOKEN'
       - env: # set HOME location where to checkout policy repo
           name: HOME_PATH
           command: echo '/home/atlantis'
       - env: # set policy repo path
           name: POLICY_REPO_PATH
           command: echo $HOME_PATH/policy_repo
       - env: # opa binary path
           name: OPA_PATH
           command: echo '/usr/local/bin'
       - run: echo '==== This first message is from the plan step | before plan action ===='
       - run: rm -rf $POLICY_REPO_PATH || true
       - run: mkdir -p $POLICY_REPO_PATH
       # get the workflows repo to execute opa policy script
       - run: git -C $POLICY_REPO_PATH clone https://$GITHUB_TOKEN@github.com/8x8/auto_gitops_oci_opa_policies.git
       # commenting out requirements.txt as there is no need at present for any special packages to installed
       # - run: pip3 install -r $POLICY_REPO_PATH/auto_gitops_oci_opa_policies/scripts/requirements.txt
       - run: terragrunt plan -no-color -input=false -out=$PLANFILE
       - run: terragrunt show -no-color -json $PLANFILE > $SHOWFILE
       - run: python3 $POLICY_REPO_PATH/auto_gitops_oci_opa_policies/scripts/opa_policy_check.py
       - run: echo '==== This second message is from the plan step | after plan action ===='
     apply:
       steps:
       - env:
           name: TERRAGRUNT_TFPATH
           command: 'echo "terraform"'
       - run: terragrunt apply -no-color -input=false $PLANFILE

# Optionally specify additional environment variables in raw yaml format
# Useful to specify variables refering to k8s objects
# environmentRaw:
#   - name: POD_IP
#     valueFrom:
#       fieldRef:
#         fieldPath: status.podIP
environmentRaw: []

initContainers:
- name: fetch-git-creds
  image: phx.ocir.io/idxixi5bmstw/utility-images/utility-container:latest
  securityContext:
    runAsUser: 0
  command: ["/bin/sh","-c"]
  args:
    - compartment_id=`oci iam compartment list --compartment-id-in-subtree true --compartment-id ocid1.tenancy.oc1..aaaaaaaax7tm7jtfarexna447cmubjxwou6lug42jss2ddyis63wqo3lrpda --auth instance_principal | jq '.data[] | select(.["name"] == "$(OCI_VAULT_COMPARTMENT)" ) | .["id"]'|tr -d '"'`;
      token_secret_id=`oci vault secret list -c $compartment_id --auth instance_principal | jq '.data[] | select(.["secret-name"] == "$(GIT_TOKEN_SECRET_NAME_OCI_V)" ) | .["id"]'|tr -d '"'`;
      github_token=`oci secrets secret-bundle get --secret-id $token_secret_id --auth instance_principal | jq -r '.data["secret-bundle-content"]["content"]' | base64 -d - |tr -d '"'`;
      webhook_secret_id=`oci vault secret list -c $compartment_id --auth instance_principal | jq '.data[] | select(.["secret-name"] == "$(WEBHOOK_SECRET_NAME_OCI_V)" ) | .["id"]'|tr -d '"'`;
      github_secret=`oci secrets secret-bundle get --secret-id $webhook_secret_id --auth instance_principal | jq -r '.data["secret-bundle-content"]["content"]' | base64 -d - |tr -d '"'`;
      kubectl create secret generic git-secrets --save-config --dry-run=client --from-literal=github_token=$github_token --from-literal=github_secret=$github_secret -o yaml | kubectl apply -f -;
  env:
    - name: OCI_VAULT_COMPARTMENT
      value: "tenantadmin-production"
    - name: GIT_TOKEN_SECRET_NAME_OCI_V
      value: "sa-selfservice-local-testing-token"
    - name: WEBHOOK_SECRET_NAME_OCI_V
      value: "tree_main_webhook_secret"

# We only need to check every 60s since Atlantis is not a high-throughput service.
livenessProbe:
  enabled: true
  periodSeconds: 60
  initialDelaySeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  scheme: HTTP
readinessProbe:
  enabled: true
  periodSeconds: 60
  initialDelaySeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  scheme: HTTP

podTemplate:
  annotations: {}
    # kube2iam example:
    # iam.amazonaws.com/role: role-arn
  labels: {}

# It is not recommended to run atlantis as root
statefulSet:
  annotations: {}
  labels: {}
  securityContext:
    fsGroup: 1000
    runAsUser: 100
    fsGroupChangePolicy: "OnRootMismatch"
  priorityClassName: ""

## Optionally customize the terminationGracePeriodSeconds
# terminationGracePeriodSeconds: 60

ingress:
  enabled: true
  ingressClassName:
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
## this is in case we want several paths under the same host, with different backend services
#  paths:
#    - path: "/path1"
#      service: test1
#      port:
#    - path: "/path2"
#      service: test2
#      port:
  pathType: Prefix
  host:

## in case we need several hosts:
  hosts:
    - host: chart-example.local
      paths: ["/"]
#      service: chart-example1
    - host: chart-example.local2
#      service: chart-example1
      paths: ["/lala"]
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  labels: {}

## Allow to override the /etc/ssl/certs/ca-certificates.cer with your custom one
# You have to create a secret `my-ca-certificates`
# customPem: my-ca-certificates

resources:
  requests:
    memory: 1Gi
    cpu: 100m
  limits:
    memory: 1Gi
    cpu: 100m

# Disk space for Atlantis to check out repositories
dataStorage: 5Gi

replicaCount: 1

## test container details
test:
  enabled: false
  image: lachlanevenson/k8s-kubectl
  imageTag: v1.4.8-bash

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # Set the `automountServiceAccountToken` field on the pod template spec
  # If false, no kubernetes service account token will be mounted to the pod
  mount: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # Annotations for the Service Account
  # Example:
  #
  # annotations:
  #   annotation1: value
  #   annotation2: value
  annotations: {}

# tlsSecretName: tls

# Optionally specify additional environment variables to be populated from Kubernetes secrets.
# Useful for passing in TF_VAR_foo or other secret environment variables from Kubernetes secrets.
environmentSecrets: []
# environmentSecrets:
#   - name: THE_ENV_VAR
#     secretKeyRef:
#       name: the_k8s_secret_name
#       key: the_key_of_the_value_in_the_secret


# Optionally specify additional Kubernetes secrets to load environment variables from.
# All key-value pairs within these secrets will be set as environment variables.
# Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
# For example, providing ATLANTIS_GH_USER here and defining a value for github.user will result in the github.user value being used.
loadEnvFromSecrets: []
# loadEnvFromSecrets:
#   - secret_one
#   - secret_two

# Optionally specify additional Kubernetes ConfigMaps to load environment variables from.
# All key-value pairs within these ConfigMaps will be set as environment variables.
# Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
# For example, providing ATLANTIS_ALLOW_FORK_PRS here and defining a value for allowForkPRs will result in the allowForkPRs value being used.
loadEnvFromConfigMaps: []
# loadEnvFromConfigMaps:
#   - config_one
#   - config_two

# Optionally specify google service account credentials as Kubernetes secrets. If you are using the terraform google provider you can specify the credentials as "${file("/var/secrets/some-secret-name/key.json")}".
googleServiceAccountSecrets: []
# googleServiceAccountSecrets:
#   - name: some-secret-name
#     secretName: the_k8s_secret_name

# Optionally specify additional volumes for the pod.
extraVolumes: []
#extraVolumes:
#  - name: git_secrets
#    emptyDir: {}

# Optionally specify additional volume mounts for the container.
extraVolumeMounts: []
#extraVolumeMounts:
#  - name: git_secrets
#    mountPath: /env

extraManifests: []
# extraManifests:
#  - apiVersion: cloud.google.com/v1beta1
#    kind: BackendConfig
#    metadata:
#      name: "{{ .Release.Name }}-test"
#    spec:
#      securityPolicy:
#        name: "gcp-cloud-armor-policy-test"


# hostAliases:
#   - hostnames:
#     - aaa.com
#     - test.ccc.com
#     ip: 10.0.0.0
#   - hostnames:
#     - bbb.com
#     ip: 10.0.0.2

extraArgs: []
# extraArgs:
# - --disable-autoplan
# - --disable-repo-locking

extraContainers: []
# extraContainers:
#  - name: <container name>
#    args:
#      - ...
#    image: <docker images>
#    imagePullPolicy: IfNotPresent
#    resources:
#      limits:
#        memory: 128Mi
#      requests:
#        cpu: 100m
#        memory: 128Mi
#    volumeMounts:
#      - ...

containerSecurityContext: {}
# containerSecurityContext:
#   allowPrivilegeEscalation: false
#   readOnlyRootFilesystem: true

# allowForkPRs enables atlantis to run on a fork Pull Requests
allowForkPRs: false

# allowDraftPRs enables atlantis to run on a draft Pull Requests
allowDraftPRs: false

# hidePrevPlanComments enables atlantis to hide previous plan comments
hidePrevPlanComments: true

## defaultTFVersion set the default terraform version to be used in atlantis server
# defaultTFVersion: 0.12.0

# disableApply disables running `atlantis apply` regardless of which flags are sent with it
disableApply: false

# disableApplyAll disables running `atlantis apply` without any flags
disableApplyAll: false

# disableRepoLocking stops atlantis locking projects and or workspaces when running terraform
disableRepoLocking: false

# Use Diff Markdown Format for color coding diffs
enableDiffMarkdownFormat: false

# Optionally specify an username and a password for basic authentication
# basicAuth:
#   username: "atlantis"
#   password: "atlantis"

# Common Labels for all resources created by this chart.
commonLabels: {}

